using Microsoft.VisualStudio.TestTools.UnitTesting;
using PcVueSpyLog;
using PcVueSpyTests.Properties;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace PcVueSpyTests
{
    [TestClass()]
    public class LogTests
    {
        private string Filename { get; set; }
        private string[] Lines { get; set; }

        public LogTests()
        {
            this.Filename = Environment.CurrentDirectory + @"\..\..\Spy.log";
            this.Lines = File.ReadAllLines(Filename);
            //var toto = Resources.FileFunction.Length;
        }

        [TestMethod()]
        public void TestLogType()
        {
            Log obj = Log.Create(this.Lines[0]);
            Assert.AreEqual(typeof(Fenetre), obj.GetType());
        }

        [TestMethod()]
        public void TestLogAttribute()
        {
            Fenetre obj = Log.Create(this.Lines[2]) as Fenetre;
            Assert.AreEqual("Alarmes courantes", obj?.Text);
        }

        [TestMethod()]
        public void TestEquality()
        {
            OuvertureFermeture objA = Log.Create(this.Lines[17]) as OuvertureFermeture;
            Log objB = Log.Create(this.Lines[18]);

            Assert.AreEqual(true, objA.Equals(objB));
        }

        [TestMethod()]
        public void OccurrencesCount()
        {
            Assert.AreEqual(3, PcVueSpyLog.Log.GetLogsWithSameKey(Log.Create(this.Lines[Lines.Length - 1])).Count);
        }

        [TestMethod()]
        public void RemoveWhiteSpacesBeforeAttributeValue()
        {
            OuvertureFermeture obj = Log.Create(this.Lines[1]) as OuvertureFermeture;

            Assert.AreEqual("Menu Elevatique", obj?.TitreSynoptique);
        }

        [TestMethod()]
        public void DateTimeList()
        {
            List<Log> Logs = PcVueSpyLog.Log.GetLogsWithSameKey(Log.Create(this.Lines[Lines.Length - 1])).OrderBy(s => s.DateTime).ToList();
            List<DateTime> dTimes = Logs.Select(s => s.DateTime).ToList();

            List<DateTime> expectedTimes = new List<DateTime>
            {
                 GetDateTime("[15/05/2018 10:56:12]"),
                 GetDateTime("[15/05/2018 10:56:13]"),
                 GetDateTime("[15/05/2018 10:56:17]")
            };

            CollectionAssert.AreEqual(expectedTimes, dTimes);
        }

        /// <summary>
        /// Récupère le DateTime en fonction d'une chaîne de caractères
        /// </summary>
        /// <param name="dateTime">
        /// Format : [JJ/MM/AAAA HH:mm:ss]
        /// </param>
        /// <returns></returns>
        private DateTime GetDateTime(string dateTime)
        {
            return DateTime.ParseExact(dateTime, "[dd/MM/yyyy HH:mm:ss]", System.Globalization.CultureInfo.InvariantCulture);
        }

        [TestMethod()]
        public void OccurrencesCountBetweenDates()
        {
            DateTime DateDebut = GetDateTime("[15/05/2018 10:56:12]");
            DateTime DateFin = GetDateTime("[15/05/2018 10:56:13]");

            Assert.AreEqual(2, PcVueSpyLog.Log.GetLogsWithSameKeyBetweenDates(Log.Create(this.Lines[Lines.Length - 1]), DateDebut, DateFin).Count);
        }

        [TestMethod()]
        public void SortListOccurrences()
        {
            Assert.AreEqual(3, Log.SortListLog().FirstOrDefault().Count);
        }

        [TestMethod()]
        public void SortListOccurrencesBetweenDates()
        {
            DateTime DateDebut = GetDateTime("[15/05/2018 10:56:12]");
            DateTime DateFin = GetDateTime("[15/05/2018 10:56:13]");

            Assert.AreEqual(2, Log.SortListLogBetweenDates(DateDebut, DateFin).FirstOrDefault().Count);
        }
        [TestMethod()]
        public void SortListOccurrencesByType()
        {
            Assert.AreEqual(1, Log.SortListLogByType(ConstsType.OUVERTURE_FERMETURE).FirstOrDefault().Count);
        }

        [TestMethod()]
        public void SortListOccurrencesByTypeBetweenDates()
        {
            DateTime DateDebut = GetDateTime("[15/05/2018 10:56:12]");
            DateTime DateFin = GetDateTime("[15/05/2018 10:56:13]");

            Assert.AreEqual(2, Log.SortListLogByTypeBetweenDates(ConstsType.ALARME, DateDebut, DateFin).FirstOrDefault().Count);
        }
    }
}
